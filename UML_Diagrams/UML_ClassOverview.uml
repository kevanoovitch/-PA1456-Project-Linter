@startuml classOverview 
'Objects
class scanner 
class inputHandler {
    <<Context>>
    +bool getIsUrl()
    +git_repository *repo
    +pickStrategy(string input)
    +executeStrategy()
    -string input
    #folderPath
    -bool isUrl()
    -bool processSuccess
    -Strategy* StrategyInput
    -argumentChecker()

    
}

class fs{
    +void checkAndClear(string path, istream &in = cin);
    +void clearDir(string path);
    +bool isEmpty(string path);
}

class typeURL{
    +typeURL(inputHandler *h) : requries a link to parent 
    +processInput()
    +getIsUrl()
    -inputHandler *parentInputHandler

    
}
class typeFolder{
   
     
}
abstract Strategy{
    +virtual getIsUrl()
    +virtual processInput()
    
}
struct scanResult


'class batchHandler 'optional RQ
'class dockerHandler 'optional RQ



'Relations
scanner -->  ResultInterpreter
inputHandler --> scanner
scanner -- scanResult
Strategy --"1" inputHandler : Strategy Pattern
Strategy <|-- typeURL
Strategy <|-- typeFolder
fs -- inputHandler

ResultInterpreter -- scanResult

'Result related lines
class ResultInterpreter{
    <<Context>>
    +InterpretResult()
    +PrintDetails() <<Print all entries>>
    
}
abstract resultEntry{
    <<Strategy Interface>>
    +Name
    +paths[]
    +found 
    +indication
    +indicationReason
    IndicatorDeterminator() {abstract}
    parentPrintEntry() : <<Generic Print>>
    
}
class readMeEntry{
    IndicatorDeterminator()
    PrintEntry()
}
class LicenseEntry{
    IndicatorDeterminator()
     PrintEntry()
}
class WorkflowEntry{
    IndicatorDeterminator()
     PrintEntry()
}
class gitignoreEntry{
    IndicatorDeterminator()
     PrintEntry()
}
ResultInterpreter --"*" resultEntry
resultEntry <|-- readMeEntry
resultEntry <|-- LicenseEntry
resultEntry <|-- WorkflowEntry
resultEntry <|-- gitignoreEntry
@enduml